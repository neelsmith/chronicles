import edu.holycross.shot.chron.*
import groovy.xml.MarkupBuilder
import edu.harvard.chs.cite.CiteUrn


String contentType = "text/html"
response.setContentType(contentType)
response.setHeader( "Access-Control-Allow-Origin", "*")


String serverUrl = "@tripleserver@"
JGraph jg = new JGraph(serverUrl)


// do some error checking on this ...
String urn = params.urn


def synchronisms = jg.getSynchronismsForRuler(urn)


StringWriter writer = new StringWriter()
MarkupBuilder html = new MarkupBuilder(writer)




html.html {
    head {
        title("Synchronisms for: ${urn}")
    }
    
    body {
        
    	header {
            h1 {
                mkp.yield "Synchronisms for: ${urn}"
            }
            nav (role: 'navigation') {
                mkp.yield "Chronometer: "
                a(href: "home",  "home")
            }

        }
    	
        article {
            ul {
                synchronisms.each { syn ->
                    li {
                        CiteUrn year1
                        CiteUrn year2
                        try {
                            year1 = new CiteUrn(syn[1])
                            year2 = new CiteUrn(syn[3])

                            mkp.yield "${syn[0]} = "
                            String collection = year2.getCollection()
                            switch (collection) {
                                case "olympiadyear":
                                    a (href : "olympiad?urn=${year2}" , "${syn[2]}")
                                break

                                default :
                                    a(href : "synchronisms?urn=urn:cite:chron:${year2.getCollection()}", "${syn[2]}")
                                break
                            }


                        } catch (Exception e) {
                            mkp.yield "Count not parse identifiers for these references (${syn})"
                            System.err.println "synchronisms:  Exception ${e}"
                        }
                    }
                }
            }
        }
        footer {
            mkp.yield "INSERTFOOTER"
        }
    }
}


String base = writer.toString()
println base.replaceAll('INSERTFOOTER',"""@htmlfooter@""")


